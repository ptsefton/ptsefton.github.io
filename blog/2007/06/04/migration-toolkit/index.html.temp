<html>
<head>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-898010-1";
urchinTracker();
</script>
<title>
ptsefton.com :: Batch tools for repository migration: the RUBRIC solution
</title>
</head>
<body>
<script type="text/javascript"><!--
google_ad_client = "pub-4309697012647581";
/* 728x90, created 2/10/08 */
google_ad_slot = "1205309022";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
</script>
<!-- SiteSearch Google -->
<form action="http://www.google.com/custom" method="get" target="_top">
<table bgcolor="#ffffff" border="0">
<tr><td align="left" height="32" nowrap="nowrap" valign="top">
</td>
<td nowrap="nowrap">
<input name="domains" type="hidden" value="ptsefton.com"/>
<label for="sbi" style="display: none">Enter your search terms</label>
<input id="sbi" maxlength="255" name="q" size="31" type="text" value=""/>
<label for="sbb" style="display: none">Submit search form</label>
<input id="sbb" name="sa" type="submit" value="Google Search"/>
</td></tr>
<tr>
<td> </td>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input id="ss0" name="sitesearch" type="radio" value=""/>
<label for="ss0" title="Search the Web"><font color="#000000" size="-1">Web</font></label></td>
<td>
<input checked="" id="ss1" name="sitesearch" type="radio" value="ptsefton.com"/>
<label for="ss1" title="Search ptsefton.com"><font color="#000000" size="-1">ptsefton.com</font></label></td>
</tr>
</table>
<input name="client" type="hidden" value="pub-4309697012647581"/>
<input name="forid" type="hidden" value="1"/>
<input name="ie" type="hidden" value="ISO-8859-1"/>
<input name="oe" type="hidden" value="ISO-8859-1"/>
<input name="cof" type="hidden" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"/>
<input name="hl" type="hidden" value="en"/>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
<h1>Batch tools for repository migration: the RUBRIC solution</h1>
<a href="/">Home</a>-<a href="/blog/index.html">blog</a>-<a href="/blog/2007/index.html">2007</a>-<a href="/blog/2007/06/index.html">06</a>-<a href="/blog/2007/06/04/index.html">04</a>
<div><p class="P1">On the <a href="http://rubric.edu.au/">RUBRIC project</a> we do a lot of moving of data between Institutional Repository software applications. Here are a few notes on the approach we've taken to data migration and batch-ingest, I hope that this will eventually be written up as a paper. There was a poster that Caroline Drury gave at OpenRepositories 2007 but it doesn't seem to be available online, we'll have to remedy that.</p><p>When we started, we tried using the batch-upload that comes with the Vital repository solution. It uses XML configuration files to describe a migration scenario. It suffered a little bit from a lack of documentation, but the biggest problem was more fundamental than that: it was the complexity of trying to deal with the kinds of real-world migration we see <span class="spCh spChx2013">–</span> how do you express what do do with different kinds of files? How to understand some arbitrary export format from another application? Apart from all that we also wanted to work with DSpace.</p><p>So, I decided to take an alternative approach and to use a general purpose programming language, rather than struggling with increasingly complex configuration.</p><p><a href="http://techxplorer.com/">Corey Wallis</a>, who worked too-briefly with the RUBRIC tech team wrote the first batch of scripts, using Python, with one script per migration scenario. But the design turned out not to be optimal, as the scripts ended up needing too many configuration options and before too long we were approaching the kind of complexity we were trying to get around. (Not Corey's fault, mine).</p><p>Our second attempt has been coded mostly by <a href="http://techteam.wordpress.com/">Tim McCallum and Bron Dye</a>, using the Unix approach  of <span class="spCh spChx201c">“</span>Do one thing, do it well.<span class="spCh spChx201d">”</span> <a href="#ftn0" name="ftn0-text"><span style="vertical-align: super;"><span class="footnote">1</span></span></a>. </p><p>Let's take the example of migrating content from and <a href="http://adt.caul.edu.au/">ADT</a> (Australasian Digital Theses) repository into a Fedora based repository. We have a proper <a href="http://rubric.edu.au/techreports/tech_report-adt_harvest_to_foxml.htm">procedure</a> up for this if you want all the detail, but I'll run through some of the main ideas.</p><p>We use the DSpace Simple Archive Format as an intermediate file format, the advantage of this as the instead of going all the way to Fedora, you can '<a href="http://www.urbandictionary.com/define.php?term=get+off+at+redfern">Get off at Redfern</a>' and put stuff into a DSpace repository or run a few more scripts and go through terminate at Fedora. The simple archive format uses one directory per compound object, with a metadata file and all the required data streams and  dead-simple manifest file. We wrote a Python class to handle the format, so scripts can easily open or create an archive and do CRUD <a href="#ftn1" name="ftn1-text"><span style="vertical-align: super;"><span class="footnote">2</span></span></a> operations on it. </p><p>(When there are better standards for cross-repository ingest and export formats it will make sense to switch over to using those. More on this after I visit the UK next week amongst other things I will find out about <a href="http://www.ukoln.ac.uk/repositories/digirep/index/SWORD">SWORD</a>:</p><blockquote class="bq"><p>SWORD (Simple Web-service Offering Repository Deposit) will take forward the Deposit protocol developed by a small working group as part of the JISC Digital Repositories Programme by implementing it as a lightweight web-service in four major repository software platforms: EPrints, DSpace, Fedora and IntraLibrary. The existing protocol documentation will be finalised by project partners and a prototype <span class="spCh spChx2018">‘</span>smart deposit<span class="spCh spChx2019">’</span> tool will be developed to facilitate easier and more effective population of repositories. The project intends to take an iterative approach to developing and revising the protocol, web-services and client implementation through evaluative testing and feedback mechanisms. Community acceptance and take-up will be sought through dissemination activities. The project is led by UKOLN, University of Bath, with partners at the University of Wales, Aberystwyth, the University of Southampton and Intrallect Ltd. The project aims to improve the efficiency and quality of repository deposit and to diversity and expedite the options for timely population of repositories with content whilst promoting a common deposit interface and supporting the Information Environment principles of interoperability.</p><p><a href="http://www.ukoln.ac.uk/repositories/digirep/index/SWORD">http://www.ukoln.ac.uk/repositories/digirep/index/SWORD</a></p></blockquote><p>)</p><p>The first script in a  thesis migration is one that's specific to ADT. A harvester that screen-scrapes ADT pages and extracts metadata <span class="spCh spChx2013">–</span> we use Python's extensive web-powers for this. It writes the results out into a the simple archive format. </p><p>One of the most useful scripts is one that iterates over an archive and runs an XSLT transformation. We use this a lot, for taking the not-terribly-well standardized Dublin Core metatadata used by various ADT repositories and transforming it to MARCXML format, for transforming that into a new Dublin Core data stream. (Different sites in the ADT program use different capitalisation on their dublin core elements names for example).</p><p>Speaking of XSLT, of course we use <a href="http://utf-x.sourceforge.net/">UTF-X</a> to unit-test all our XSLT transformations. What happens is the tech team get advice from <a href="http://metalogger.wordpress.com/tag/metadata/">Metadata Speciast Neil Godfrey</a> about a particular cross-walk they need to code. They encode Neil's advice as a series of UTF-X tests then write the XSLT. The tests help a lot in preventing regression and serve to document the crosswalk. Here's a bit grabbed at random to illustrate what a test looks like:</p><pre>&lt;!-- Abstract Element --&gt;</pre><pre>&lt;utfx:test&gt;</pre><pre>&lt;utfx:name&gt;Abstract Element&lt;/utfx:name&gt;</pre><pre>&lt;utfx:assert-equal&gt;</pre><pre>&lt;utfx:source validate="no"&gt;</pre><pre>&lt;eprintsdata &gt;</pre><pre>&lt;record&gt;</pre><pre>&lt;field name="abstract"&gt;[Introduction]: European Australians have always had trouble&lt;/field&gt;</pre><pre>&lt;/record&gt;</pre><pre>&lt;/eprintsdata&gt;</pre><pre>&lt;/utfx:source&gt;</pre><pre>&lt;utfx:expected validate="no"&gt;</pre><pre>&lt;oai_dc:dc xmlns:dc="http://purl.org/dc/elements/1.1" xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc"&gt;</pre><pre>&lt;dc:description&gt;[Introduction]: European Australians have always had trouble&lt;/dc:description&gt;</pre><pre>&lt;/oai_dc:dc&gt;   </pre><pre>&lt;/utfx:expected&gt;</pre><pre>&lt;/utfx:assert-equal&gt;</pre><pre>&lt;/utfx:test&gt;</pre><p>This test shows that in our input data <code>&lt;field name="abstract"&gt;</code> maps to the Dublin Core element <code>&lt;dc:description&gt;</code>. Not much to it, but it <b>really helps</b><b> to do this first</b>, and then write the XSLT.</p><p>(Note that the UTF-X tests aren't up on the public download site yet as they contain bits of real data <span class="spCh spChx2013">–</span> it's all open access but we want to confirm with our partners that they don't mind it being up there)</p><p>I love walking in to our office, looking across to someone's computer and seeing that all the tests are green. Here's a screenshot of some tests for something or other <span class="spCh spChx2013">–</span> each line represents one test and the green [OK] means that it passes.</p><p><a name="graphics1"></a><img alt="graphics1" class="fr1" height="377" src="/blog/2007/06/04/migration-toolkit/1.jpg" style="border:0px;" width="552"/></p><p>We have other scripts to extract full-text from PDF files, and turn the simple archive format into FOXML for ingest into the Fedora repository and still more to do various little fixups that seem to be required like having namespaces declared in special spots in XML files, even though it shouldn't matter where they are declared.</p><p>So far I'm really happy with the <i>do one thing</i> approach, and I bet that even as repositories get better at talking to each other our toolkit will still be useful for munging data from outside the repository echo-chamber.</p><p>PS.</p><p>Just after I wrote this we ran into an issue with namespaces in some of the data migration stuff for one of our partners; because there was a substantial bank of unit tests in place the total time to completely change a couple of stylesheets was only about half an hour, and at the end of that we're confident that they are working exactly the same way as they were before.</p><p></p><hr/><div style="font-size: .9em;"><div class="footnote"><a href="#ftn0-text" name="ftn0">1</a>Wikipedia contributors, <span class="spCh spChx201c">“</span>Unix philosophy - Wikipedia, the free encyclopedia,<span class="spCh spChx201d">”</span> 2007, http://en.wikipedia.org/wiki/Unix_philosophy#McIlroy:_A_Quarter_Century_of_Unix  (accessed June 4, 2007).<br/></div></div><hr/><div style="font-size: .9em;"><div class="footnote"><a href="#ftn1-text" name="ftn1">2</a>Wikipedia contributors, <span class="spCh spChx201c">“</span>Create, read, update and delete - Wikipedia, the free encyclopedia,<span class="spCh spChx201d">”</span> http://en.wikipedia.org/wiki/CRUD_(acronym)  (accessed June 4, 2007).<br/></div></div></div>
</body>
</html>