<html>
<head>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-898010-1";
urchinTracker();
</script>
<title>
ptsefton.com :: A killer app for handles
</title>
</head>
<body>
<script type="text/javascript"><!--
google_ad_client = "pub-4309697012647581";
/* 728x90, created 2/10/08 */
google_ad_slot = "1205309022";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
</script>
<!-- SiteSearch Google -->
<form action="http://www.google.com/custom" method="get" target="_top">
<table bgcolor="#ffffff" border="0">
<tr><td align="left" height="32" nowrap="nowrap" valign="top">
</td>
<td nowrap="nowrap">
<input name="domains" type="hidden" value="ptsefton.com"/>
<label for="sbi" style="display: none">Enter your search terms</label>
<input id="sbi" maxlength="255" name="q" size="31" type="text" value=""/>
<label for="sbb" style="display: none">Submit search form</label>
<input id="sbb" name="sa" type="submit" value="Google Search"/>
</td></tr>
<tr>
<td> </td>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input id="ss0" name="sitesearch" type="radio" value=""/>
<label for="ss0" title="Search the Web"><font color="#000000" size="-1">Web</font></label></td>
<td>
<input checked="" id="ss1" name="sitesearch" type="radio" value="ptsefton.com"/>
<label for="ss1" title="Search ptsefton.com"><font color="#000000" size="-1">ptsefton.com</font></label></td>
</tr>
</table>
<input name="client" type="hidden" value="pub-4309697012647581"/>
<input name="forid" type="hidden" value="1"/>
<input name="ie" type="hidden" value="ISO-8859-1"/>
<input name="oe" type="hidden" value="ISO-8859-1"/>
<input name="cof" type="hidden" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"/>
<input name="hl" type="hidden" value="en"/>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
<h1>A killer app for handles</h1>
<a href="/">Home</a>-<a href="/blog/index.html">blog</a>-<a href="/blog/2007/index.html">2007</a>-<a href="/blog/2007/03/index.html">03</a>-<a href="/blog/2007/03/16/index.html">16</a>
<div><p class="P1">I've touched on <b>persistent identifiers</b> in general and <b>handles</b> in particular here a couple of times<a href="http://ptsefton.com/blog/2006/11/01/identify_me">. One time</a> I wrote about plain text citations. <a href="http://ptsefton.com/blog/2006/11/01/repository-maintenance">Another time I</a> looked at migration issues. I've been what you might call a bit of a handle sceptic, 'cos I didn't really see how they fitted with real-life web based repositories, but for the first time this week I think I can see new services built to exploit handles could really make life easier. I'll go through a bit of background on the issues first, then look at what I think may be a killer app for handles. Killer enough to consider using them sooner rather than later, anyway.</p><h1><a id="id31" name="id31"><!--id31--></a>About handles</h1><p>I <a href="http://ptsefton.com/blog/2006/11/01/identify_me">speculated</a> a while ago about whether a full-text citation, makes a good persistent identifier for a conference paper. The answer was sort of no, as far as automated lookup goes, although the clues offered by a text citation mean you can do some detective work to find something.</p><p>Another approach to naming things is to use a <b>handle</b>. A handle is a name with some special properties, and is backed some computer infrastructure designed to help you find the digital object that the handle names.</p><p>Lets look at a real example.</p><p>Here's a handle: <code>1959.1/2635</code></p><p>This is a name that's guaranteed to be unique within the handle infrastructure. It might also be a part number for a low cost cutting-edge high-performance fibre-composite prosthetic chicken foot, made by a small company in Gatton, but that's irrelevant.</p><p>The handle website <a href="http://handle.net/overviews/handle-syntax.html">explains:</a></p><blockquote class="bq"><p>Within the handle namespace, every identifier consists of two parts: its handle prefix, also known as a "naming authority", and a suffix or unique "local name" under the prefix. The prefix and suffix are separated by the ASCII character "/". An identifier may thus be defined as</p><p><b>&lt;Handle&gt; ::= &lt;Handle Prefix&gt; "/"&lt;Handle Suffix&gt;</b></p><p>For example, "10.1045/april2006-paskin" is an identifier (also known as a Digital Object Identifier (DOI), an implementation of the Handle System) for an article published in D-Lib Magazine. It is defined under the prefix (naming authority) "10.1045", and its suffix (local name) is "april2006-paskin".</p><p>http://handle.net/overviews/handle-syntax.html </p></blockquote><p>What can you do with the handle known as <code>1959.1/2635?</code></p><p>You can go to a handle resolver and ask it to take you to the object.</p><ol class="lin" style="list-style: decimal;"><li><p>Go to <a href="http://hdl.handle.net/">http://hdl.handle.net/</a></p></li><li><p>Put the handle, <code>1959.1/2635</code> in the handle box.</p></li><li><p>Leave the checkboxes alone, I won't discuss those.</p></li><li><p>Hit Submit.</p></li></ol><p>Within a second or two you'll be looking at something like this: <a href="http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream=">http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream=</a></p><p>Of course when you read this post the URL that the handle resolver takes you to might be different. But the idea is that if you use the resolver then you'll always get the metadata summary page for a paper in the Monash University institutional repository even if they change the software.</p><p>Now, that page says:</p><blockquote class="bq"><p>Please use this identifier to cite or link to this item:http://arrow.monash.edu.au/hdl/1959.1/2635 </p></blockquote><p>So if I were to mail you a link, that's the one I'm supposed to use. I could just mail you the handle and assume that you'd know what to do with it but I'm not that mean.</p><p>So, there are quite a few ways to refer to this thing:</p><ol class="lin" style="list-style: decimal;"><li><p><a href="http://arrow.monash.edu.au/hdl/1959.1/2635">http://arrow.monash.edu.au/hdl/1959.1/2635</a></p></li><li><p>hdl:1959.1/2635 </p></li><li><p><a href="http://hdl.handle.net/1959.1/2635">http://hdl.handle.net/1959.1/2635</a></p></li><li><p><a href="http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream=">http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream=</a></p></li><li><p><a href="http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream">http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream</a></p></li></ol><p>The Monash folks would like you to use the first option, so lets call that the <i>canonical URL</i>. This would mean that in future they could get rid of the redirect step when you end up looking at a messy looking URL, lets call that the <i>messy URL</i>, instead of the the canonical URL. </p><p>The last example is a problem. That's the messy URL minus the last '='. Unfortunately that works. This is unfortunate because it's an easy error to make, and it will work, but that link is highly likely to be non-persistent. </p><p>I bet lots of people will just copy the messy URL from the address bar. Some might even think that there's something odd going on when they use the URL they are requested to use but the browser changes it on them.</p><blockquote class="bq"><p>http://arrowprod.lib.monash.edu.au:8000/access/detail.php?pid=monash:2635&amp;datastream=</p></blockquote><p>Which means a maintenance headache for the Monash repository minders. If they upgrade their repository software in a way that will change the URL for an item, which I happen to know they are planning to do, then they will need to think about <b>redirecting </b>all requests for those old fashioned messy URLs that used to work but no longer do.</p><p>This is easy enough to do: they need to tell the web server how to recognize requests directed at old versions of the repository, yank out the local identifier,  <code>monash:2635</code>, cut it up, stick it together with the handle prefix <code>1959.1</code> to make the complete handle <code>1959.1/2635</code> and then redirect the request to a handle resolver. That's one line of redirect code. (And there's a problem if the handles are not related to the local identifiers, that simply won't work <span class="spCh spChx2013">–</span> you'd need a lookup table)</p><p>There also needs to be an <b>ongoing commitment</b> from the institution that as long as there's DNS (the bit that resolves the name arrow.monash.edu.au to a particular Internet address) and HTTP (the protocol your web browser uses to talk to the repository software) that they will keep the redirect in place. Ongoing commitment is a policy and governance thing. It's about putting processes in place to ensure that future systems don't break things that used to work. So the simpler the thing you commit to, the more chance there is that future generations will be able to keep it up.</p><p>I used to think that because you had to do this redirect stuff anyway that buying in to handles was just another thing to worry about. Another mouth to feed. Handles are not just for Christmas.</p><p>But what if the handles stuff actually helped?</p><h1><a id="id32" name="id32"><!--id32--></a>A killer app (or two) for handles?</h1><p>Lyle Winton from the <a href="http://www.arrow.edu.au/PILIN">PILIN</a> project has<b> proposed a really nice sounding service</b>, <i>findurl</i>. Instead of having to work out a bit of complicated redirect-code that parses a request and works out where to redirect it for each and every bit of web software you ever install, why not ask a new handles service to find it for you? Send it the old URL and it will look for the handle record that lists the URL in question, then redirect you to the new home for the object. </p><p>This means that for any handle-enabled site you only need to commit to maintaining one teensy bit of redirect code. It would be saying <span class="spCh spChx201c">“</span>Looks like this request is for something I can no longer serve. Lets send this request on to the <code>findurl</code> service<span class="spCh spChx201d">”</span>.</p><p>(If the software has had multiple ways of viewing the same record with different URLs then a smarter redirect than a simple findurl might be appropriate. But for migrating from a well-behaved system findurl looks to me like a really simple solution)</p><p>A second killer app would be <b>handle resolver which can act as a proxy</b> rather than a redirector. That is you'd go to the canonical URL for an item at Monash, and instead of it redirecting you it would fetch the page itself and display it in the browser so you'd request this:</p><blockquote class="bq"><p>http://arrow.monash.edu.au/hdl/1959.1/2635 </p></blockquote><p>And without any redirect shenanigans you'd be looking at the metadata page for the item. (This is already on the wish list for the software vendor to provide in future.)</p><p>This handle-proxy service may also be useful at a cross-institution level. Take the Australian Government. Departments change their names,  appear, disappear, merge and split all the time. A government-wide handle-proxy for things that should have a long life and a stable name would be really useful.</p><p>There's lots more to think about with handles that I have covered here, obviously. But if you take the Monash approach of hosting your own handles services then I think you  are probably pretty safe.</p></div>
</body>
</html>