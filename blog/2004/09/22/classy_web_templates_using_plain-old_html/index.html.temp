<html>
<head>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-898010-1";
urchinTracker();
</script>
<title>
ptsefton.com :: Classy web templates using plain-old HTML
</title>
</head>
<body>
<script type="text/javascript"><!--
google_ad_client = "pub-4309697012647581";
/* 728x90, created 2/10/08 */
google_ad_slot = "1205309022";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
</script>
<!-- SiteSearch Google -->
<form action="http://www.google.com/custom" method="get" target="_top">
<table bgcolor="#ffffff" border="0">
<tr><td align="left" height="32" nowrap="nowrap" valign="top">
</td>
<td nowrap="nowrap">
<input name="domains" type="hidden" value="ptsefton.com"/>
<label for="sbi" style="display: none">Enter your search terms</label>
<input id="sbi" maxlength="255" name="q" size="31" type="text" value=""/>
<label for="sbb" style="display: none">Submit search form</label>
<input id="sbb" name="sa" type="submit" value="Google Search"/>
</td></tr>
<tr>
<td>Â </td>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input id="ss0" name="sitesearch" type="radio" value=""/>
<label for="ss0" title="Search the Web"><font color="#000000" size="-1">Web</font></label></td>
<td>
<input checked="" id="ss1" name="sitesearch" type="radio" value="ptsefton.com"/>
<label for="ss1" title="Search ptsefton.com"><font color="#000000" size="-1">ptsefton.com</font></label></td>
</tr>
</table>
<input name="client" type="hidden" value="pub-4309697012647581"/>
<input name="forid" type="hidden" value="1"/>
<input name="ie" type="hidden" value="ISO-8859-1"/>
<input name="oe" type="hidden" value="ISO-8859-1"/>
<input name="cof" type="hidden" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"/>
<input name="hl" type="hidden" value="en"/>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
<h1>Classy web templates using plain-old HTML</h1>
<a href="/">Home</a>-<a href="/blog/index.html">blog</a>-<a href="/blog/2004/index.html">2004</a>-<a href="/blog/2004/09/index.html">09</a>-<a href="/blog/2004/09/22/index.html">22</a>
<p>
The polymathematical James Tauber, author of the  <a class="external" href="http://james.tauber.name/leonardo">software</a> that runs this site has announced that he's <a class="external" href="http://jtauber.com/blog/2004/09/18/leonardo_rewrite">working on the next version</a>. Which has prompted me to dust-off one of my firmly held opinions about the best way to do HTML templates and offer it for consideration. 
</p>
<p>
I think the best mechanism is to use plain-old HTML pages (best if it's well-formed XML, XHTML even), with class names to mark the substitutable bits. 
</p>
<p>
How does it look? 
</p>
<p>
This is is a tiny sample. Elements with a class attribute that begins with  'ins ' would have their content replaced with runtime data, in this case with a bit of data called 'page-title'. The designer can also supply a CSS stylesheet with a rule for 'page-title'. (You're allowed to have multiple space-separated classes, apparently.)
</p>
<p>
</p><pre>&lt;html&gt;
&lt;head&gt;
&lt;title class='ins page-title'&gt;Placeholder title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 class='ins page-title&gt;Placeholder title&lt;/h1&gt;    </pre>
<blockquote>...</blockquote>
Why is this the 'best' way?

<ul><li> Templates are completely implementation-language neutral.</li>
<li> Designers can work with sample files with their web page and  CSS design tools of choice, without worrying about yet another set of proprietary codes.</li>
<li> If the world was perfect, we could all agree on some standard names for page elements and then we could swap templates between applications. Yes I know, I am being silly.</li></ul>
<p>
Limitations? Well it is meant to be very simple.
</p>
<p>
First of all the fact that you can't embed code in your template, is emphatically not a limitation. Code does not belong in a web page template. If you want that kind of thing go see the PHP, ASP or JSP people.
</p>
<p>
The minor limitation is that this approach makes it a bit hard to use a simple regular expression or string interpolation to populate your template, as the place-holder elements could contain fairly extensive sample content.
</p>
<p>
In the case of Leonardo you could pre-compile the templates, so
</p>
<p>
</p><pre>&lt;title class='page-title'&gt;...&lt;/title&gt; </pre>
<p>
ends up just the way it is in the current version of Leonardo:
</p>
<p>
</p><pre>&lt;title class='page-title&gt;%(page-title)s&lt;/title&gt;</pre>
<p>
And the entire template can be populated by feeding it a dictionary with all your page data in it: 
</p>
<p>
</p><pre>print template % pagestuff</pre>
<p>
Or even better, wrap it up in a plain-old HTML template class so you can say.
</p><pre>page = plainoldhtmltemplate('basic.htm')
page<a href="'page-title'">'page-title'</a> = 'Home page'
page.render()</pre>
<p>
The closest existing thing I can find is <a class="external" href="http://freespace.virgin.net/hamish.sanderson/htmltemplate.html">HTMLTemplate</a>, which allows you to do what I'm talking about here, and couple of other things, including adding repeating elements, the only problem being that it will discard the class attributes.
</p>
<p>
But really, we are talking about only a few lines of Python here to build a minimal implementation, so this lunchtime I did:
</p>
<p>
</p><pre>  import libxml2

<p>
  class plainoldhtmltemplate(dict):
      templatestring = ""
</p>
<p>
      def __init__(self, templatefilename = None):
          if templatefilename:
              self.loadtemplate(templatefilename)
</p>
<p>
      def loadtemplate(self, templatefilename):   
          try:
             rawtemplate = libxml2.parseFile(templatefilename, None)
          except:
              rawtemplate = libxml2.htmlParseFile(templatefilename, None)
</p>
<p>
          insertions = rawtemplate.xpathEval("//*<a href="starts-with(@class,'ins_')">starts-with(@class,'ins ')</a>")
          #TODO: 'sub ' for places you want to replace the placeholder
          for insert in insertions:
              classname = insert.prop('class')<a href="4:">4:</a> #after insert
              self<a href="classname">classname</a> = ''
              insert.setContent('%%(%s)s' % classname)
</p>
<p>
          self.templatestring = rawtemplate.serialize()
</p>
<p>
      def render(self):
          return self.templatestring % self</p></pre>
</body>
</html>