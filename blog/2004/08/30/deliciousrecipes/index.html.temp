<html>
<head>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-898010-1";
urchinTracker();
</script>
<title>
ptsefton.com :: Delicious recipe markup
</title>
</head>
<body>
<script type="text/javascript"><!--
google_ad_client = "pub-4309697012647581";
/* 728x90, created 2/10/08 */
google_ad_slot = "1205309022";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
</script>
<!-- SiteSearch Google -->
<form action="http://www.google.com/custom" method="get" target="_top">
<table bgcolor="#ffffff" border="0">
<tr><td align="left" height="32" nowrap="nowrap" valign="top">
</td>
<td nowrap="nowrap">
<input name="domains" type="hidden" value="ptsefton.com"/>
<label for="sbi" style="display: none">Enter your search terms</label>
<input id="sbi" maxlength="255" name="q" size="31" type="text" value=""/>
<label for="sbb" style="display: none">Submit search form</label>
<input id="sbb" name="sa" type="submit" value="Google Search"/>
</td></tr>
<tr>
<td>Â </td>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input id="ss0" name="sitesearch" type="radio" value=""/>
<label for="ss0" title="Search the Web"><font color="#000000" size="-1">Web</font></label></td>
<td>
<input checked="" id="ss1" name="sitesearch" type="radio" value="ptsefton.com"/>
<label for="ss1" title="Search ptsefton.com"><font color="#000000" size="-1">ptsefton.com</font></label></td>
</tr>
</table>
<input name="client" type="hidden" value="pub-4309697012647581"/>
<input name="forid" type="hidden" value="1"/>
<input name="ie" type="hidden" value="ISO-8859-1"/>
<input name="oe" type="hidden" value="ISO-8859-1"/>
<input name="cof" type="hidden" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"/>
<input name="hl" type="hidden" value="en"/>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
<h1>Delicious recipe markup</h1>
<a href="/">Home</a>-<a href="/blog/index.html">blog</a>-<a href="/blog/2004/index.html">2004</a>-<a href="/blog/2004/08/index.html">08</a>-<a href="/blog/2004/08/30/index.html">30</a>
<p>
If you have been following this weblog you will have seen me talking about a so-far imaginary content store called the <a href="blog/2004/04/28/platform_for_udell">Fragletorium</a>, marking up web pages with classes to show where special content (like <a href="blog/2004/06/02/recipe_schema">recipes</a>) resides so you can do sematic querying, rather than fumbling around with full text searches, and most recently, the magnificent communal bookmark system called <a class="external" href="http://del.icio.us/">del.icio.us</a>. 
</p>
<p>
This time I am going to talk about all of these. 
</p>
<p>
Jon Udell showed <a class="external" href="http://weblog.infoworld.com/udell/2004/08/11.html#a1057">early in August</a> how he automatically built del.icio.us bookmarks for his weblog by adding 'tags' (categories) to each post and then harvesting them and using the del.icio.us API to create the bookmarks.
</p>
<p>
Late in August I got around to doing the same trick on my site - with one difference. I'm too lazy to tag my posts so I have just added a tag 'ptsefton' to every post. And I have leveraged another resource; the markup I added to some, er, actually one so far, post to show that part of it was a recipe.
</p>
<p>
As mentioned before I am slowly writing code to build a full-text and XPath indexed content store (the aforementioned <a href="blog/2004/04/28/platform_for_udell">Fragletorium</a>) with every item having an XHTML rendition, regardless of its origin. I have some test code that harvests the wiki-style source documents for this site, turns them into XHTML and stores them in an XML repository where I can do XPath queries for my own amusement. Minutes of fun there, I can assure you.
</p>
<p>
Here's my del.icio.us trick, based on Jon Udell's code. 
</p>
<p>
As I process each item, using Python, in which I am still barely literate, I do an XPath query to find recipes:
</p>
<p>
</p><pre>recipes = fraglet.xhtmlDoc.xpathEval("//*<a href="@class='recipe'">@class='recipe'</a>")</pre>
<p>
If I find any then I can add a tag "recipe" to that item and post it using the del.icio.us site, using curl, just like Jon. But when he says he's generating a batch file, he must be targeting an operating system other than Windows. On Windows you need to escape the % characters otherwise they try to mean something.
</p>
<p>
</p><pre>print 'curl -u xxxxx:xxxxx "%s"' % re.sub('%','%%',post)</pre>
<p>
I have now done this to my site, and the results are here: <a class="external" href="http://del.icio.us/petey/ptsefton">all the content</a> and all the <a class="external" href="http://del.icio.us/petey/ptsefton+recipe">recipes</a>. (You can even subscribe to the RSS feed on that page if all that keeps you coming back is my recipes. Coming up sometime this financial year: chunky loquat jam and PT's infallible tomato and basil salad).
</p>
<p>
This trick would work wonders for a bigger site with better semantic markup, like, you guessed it, Jon Udell's. See his stuff about XPath search <a class="external" href="http://weblog.infoworld.com/udell/2004/02/09.html">with semantic markup in class attributes with multiple space-separated values</a>. Using the technique I have outlined here, one could pull out all the classes, maybe just going for ones starting with some magic string like 'tag' (as I am proposing in my <a href="wp-interop-styles">Word Processing Interoperability project</a>) and do one or more of the following:
</p>
<ul><li>Add tags to del.icio.us or similar that point you right to the content you seek rather than the top of the document (like I did with my recipe).</li></ul>
<ul><li>Yank out the whole element that's been marked, full-text index it separately and give it is own URL on your site. This would be great for educational content where you might want to pull out all the objectives, or the activities or whatever, not to mention finding the word 'loquat' in the ingredients list of a recipe which may well be embedded in an incomprehensible technical babble-fest like this one.</li></ul>
<ul><li>Do this recursively, so you index an entire document, then grab the recipes as separate docs, and then the ingredients from them, and so on.</li></ul>
<p>
I'm still excited about full-on XPath indexing, but I think this approach may be more generally useful and probably much cheaper to run; you define some useful queries at index time. If more queries occur to you, or your users invent them then simply define them and re-index. (This is how <a class="external" href="http://www.teratext.com.au/index.html">TeraText</a> works. It's a great XML-aware text indexing content manager of awesome power, and not inconsiderable cost that I use when I can justify it).
</p>
</body>
</html>