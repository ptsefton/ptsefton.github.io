<html>
<head>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-898010-1";
urchinTracker();
</script>
<title>
ptsefton.com :: Agility on ICE
</title>
</head>
<body>
<script type="text/javascript"><!--
google_ad_client = "pub-4309697012647581";
/* 728x90, created 2/10/08 */
google_ad_slot = "1205309022";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js" type="text/javascript">
</script>
<!-- SiteSearch Google -->
<form action="http://www.google.com/custom" method="get" target="_top">
<table bgcolor="#ffffff" border="0">
<tr><td align="left" height="32" nowrap="nowrap" valign="top">
</td>
<td nowrap="nowrap">
<input name="domains" type="hidden" value="ptsefton.com"/>
<label for="sbi" style="display: none">Enter your search terms</label>
<input id="sbi" maxlength="255" name="q" size="31" type="text" value=""/>
<label for="sbb" style="display: none">Submit search form</label>
<input id="sbb" name="sa" type="submit" value="Google Search"/>
</td></tr>
<tr>
<td> </td>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input id="ss0" name="sitesearch" type="radio" value=""/>
<label for="ss0" title="Search the Web"><font color="#000000" size="-1">Web</font></label></td>
<td>
<input checked="" id="ss1" name="sitesearch" type="radio" value="ptsefton.com"/>
<label for="ss1" title="Search ptsefton.com"><font color="#000000" size="-1">ptsefton.com</font></label></td>
</tr>
</table>
<input name="client" type="hidden" value="pub-4309697012647581"/>
<input name="forid" type="hidden" value="1"/>
<input name="ie" type="hidden" value="ISO-8859-1"/>
<input name="oe" type="hidden" value="ISO-8859-1"/>
<input name="cof" type="hidden" value="GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1"/>
<input name="hl" type="hidden" value="en"/>
</td></tr></table>
</form>
<!-- SiteSearch Google -->
<h1>Agility on ICE</h1>
<a href="/">Home</a>-<a href="/blog/index.html">blog</a>-<a href="/blog/2006/index.html">2006</a>-<a href="/blog/2006/09/index.html">09</a>-<a href="/blog/2006/09/01/index.html">01</a>
<div><p class="P1">Nigel Ward asked me recently to summarize the agile project management methodology I use at work. The general principle is <a href="http://en.wikipedia.org/wiki/Agile_software_development">explained well </a>on the  Wikipedia.</p><blockquote class="bq"><p>Most agile methods attempt to minimize risk by developing software in short timeboxes, called iterations, which typically last one to four weeks. Each iteration is like a miniature software project of its own, and includes all of the tasks necessary to release the mini-increment of new functionality: planning, requirements analysis, design, coding, testing, and documentation. While an iteration may not add enough functionality to warrant releasing the product, an agile software project intends to be capable of releasing new software at the end of every iteration. At the end of each iteration, the team reevaluates project priorities.</p><p>Agile methods emphasize realtime communication, preferably face-to-face, over written documents. Most agile teams are located in a bullpen and include all the people necessary to finish software. At a minimum, this includes programmers and their "customers." (Customers are the people who define the product. They may be product managers, business analysts, or actual customers.) The bullpen may also include testers, interaction designers, technical writers, and managers.</p><p><a href="http://en.wikipedia.org/wiki/Agile_software_developmen">http://en.wikipedia.org/wiki/Agile_software_development</a></p></blockquote><p>I'm involved in two projects that both use agile processes to reduce risk. We use a lot of the same tools on the two projects, but in slightly different ways.</p><ol class="lin" style="list-type: decimal;"><li><p>ICE is a software development project, that works with two-week development iterations. We release (usually) usable code at the end of each iteration.</p></li><li><p>RUBRIC is a project that is assisting a number of institutions to build their first Institutional Repository. We do a bit of software development, a lot of software testing, and a lot of things that are straight project management. We use many of the same tools as ICE.</p></li></ol><p>I'll focus on the ICE experience, because that project has been going for longer and it's more </p><p>The ICE development processes is 'inspired by' XP – Extreme Programming. XP has a lot of rules and principles, which I can't cite off the top of my head. We definatley don't do XP. There are no index cards involved, just for a start. Tried cards. Hated it. </p><h2>
<a id="id863442" name="id863442"><!--id863442--></a>The process</h2><ol class="lin" style="list-type: decimal;"><li><p><b>Start</b> with a statement of the aims of the project. What is it for, what it it going to do. Ours was approved by the powers that be, and published on the university website. This is a general statement, not a 500 page requirements document.</p></li><li><p><b>Pick a tame customer</b>. We picked Shirley Rueshle – education lecturer extraordinaire. XP says you need one customer embedded in the team, but that just didn't work in our context. We have a few other stakeholders from various parts of the university as well.</p></li><li><p>Then <b>start building something for a live pilot</b>. Make <b>something</b> that works. Ask the customer what she thinks, what she needs next. Fix what doesn't work and build then next most important bit.</p></li><li><p>Work towards <b>regular sort-range milestones</b>. ICE uses a two week cycle. The team meets. The programmers and roll-out people report what they did. The whole team discusses what's going to be done next cycle. They say: “We got 100 work-units done last cycle. Which 100 units worth of stuff do you want next?</p></li><li><p>Learn to<b> get good at estimating</b> by breaking tasks down into units of no more than half a day. This builds trust. You say what can be done each cycle and the customers get to believe you.</p></li><li><p>For major version releases, pick either some<b> firm release dates</b> or a <b>set of functionality</b> that has to be there. ICE did the former. We defined what needed to be in version one and worked until the features were there.  ICE-RS will work the other way; we'll have guaranteed quarterly releases with whatever we have managed to build in them.</p></li><li><p>Use <b>good development practices</b> and tools:</p><ul class="lib"><li><p>Test-first programming, to define the and document the expected behaviour of your code. </p></li><li><p>Revision control. </p></li><li><p>A good IDE.  </p></li><li><p>Estimating.</p></li></ul></li></ol><p></p><h2>
<a id="id857400" name="id857400"><!--id857400--></a>Software</h2><p>I'll say a few words about the software we use.</p><p><a href="http://subversion.tigris.org.au/">Subversion</a> for version control of code, documentation, websites. We love Subversion for revision control so much that we built it into ICE itself.</p><p>We use and recommend <a href="http://trac.edgewall.org/">Trac</a> project management software, with some added macros by Sally Macfarlane of USQ which help with estimation and give summaries of the tasks assigned to a particular milestone. Trac has a wiki for communal pages and a slightly clumsy but workable job-ticket system. The tasks and the wiki are well integrated.</p><p>And Trac knows all about subversion, so you can sign-off on a task right there in your commit statement...</p><pre>svn commit -m “Fixes #1234”
</pre><p>... and ticket 1234 is closed for you, with a link to the subversion change-set you just committed.</p><p>For unit testing we travel <a href="http://codespeak.net/py/current/doc/test.html">py.test</a> and <a href="http://utf-x.sourceforge.net/">UTF-X.</a></p><p>And, of course the ICE team uses ICE for documentation, and to build the <a href="http://ice.usq.edu.au/">ICE website</a>.</p></div>
</body>
</html>